+------------- APRENDIBLE - Notas de GUIA DE LARAVEL DESDE CERO  --------- ----------------------+
+                                                                                                +
+      Requerimientos:                                                                           +
+          * LARAGON actual 4.0.4                                                                +
+              - PHP actual 7.2.11                                                               +
+              - MySQL actual 5.7.24                                                             +
+              - HeidiSQL                                                                        +
+              - laravel actual 5.7.25 Actualizado a 6.0                                         +
+          * Edito de Texto: Atom                                                                +
+ DOCUMENTACION OFICIAL DE LARAVEL: https://laravel.com/docs/5.7 ; https://laravel.com/api/5.7/  +
+                                                                                                +
+------------------------------------------------------------------------------------------------+

/////////////////////////////////INDICE/////////////////////////////////////////////////////////////
        Nivel principiante - Proyecto Plantilla
      BACK-END:
        Notas Basicas.
        Debbug.
        Routes.
        Views con blade.
        Controladores.
        Migraciones.
        Seeders Y Factory.
        Formularios - Validaciones "FormRequest".
        Eloquen - CRUB.
        Sesiones.
        Mensajes flash o de sesion.
        Autenticacion de laravel "artisan make:auth"
        Middleware "auth y guess".
        Crear Middleware.
        Permisos con GATE.
        Roles Y Permisos de usuarios CON CHiNOBi.
        Extras.
      FRONT-END:
        PREPARAR ENTORNO CON LARAVEL MIX.
        Boostrap 4 y CSS.

//////////////////////////////////////////////////////////////////////////////////////////////////////
*                                 ***********************                                            *
*                                 *   B A C K - E N D   *                                            *
*                                 ***********************                                            *
//////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////// NOTAS BASICAS//////////////////////////////////////////////////////////////

   LARAGON,ARTISAN,COMPOSER:
   *  Nuevo Proyecto Laravel desde El terminal de laragon En /www ">laravel new nombre".
   *  Acceder: http://nombre.test
   *  Generar modelo, controlador resource, factory y migracion:  ">php artisan make:model RECURSO -a" [no incluye el seeder: "php artisan make:seeder nombreSeeder"]
   *  comandos de artisan:   ">php artisan list"
   *  rutas y controladores: ">php artisan route:list"

   *  Agregar Archivos php a laravel:
       1. composer.json -> autoload -> Agregar el archivo: "files":["NombreProyecto/nombreArchivo.php"]
       2. resetear el autoload, laragon: #composer dumpautoload.
   * luego de aplicar un cambio en config hacerlo tambien en .ENV!: "> php artisan config:clear"

   LARAVEL:
    *  variables de entorno en .env:
       -  Las configuraciones se cambian aqui para que surja Efecto.
       -  guardar config BD, urls, API keys, claves.
       -  GIT lo ignora. por lo que hay que crear otro .env para el local y otro para el servidor.
       -  APP_ENV:    local / production (servidor-nube)  / testing (otra pc cualquiera)


  ATOM hotkeys : https://github.com/nwinkler/atom-keyboard-shortcuts
      - ctrl+r; ctrl+t; ctrl+f:  Funcion codigo, busqueda archivo, palabra.
      - ctrl+d, ctrl+a; ctrl+l: seleccionar iguales, todo, lineas abajo.
      - ctrl+n; ctrl-w  nuevo archivo, cerrar tab.
      - ctrl+z; ctrl+y ir atras, adelante
      - ctrl-space: mostrar lista auto-completar
      - ctrl+shift+{ ó } : mover codigo derecha o izquierda
      - ctrl + up ó down : mover linea arriba o abajo
      - ctrl-shift-d: duplicar linea actual.
      - ctrl + shift + p: command palette
       # TERMINAL ctrl + Shift + v : PEGAR

  chrome hotkey:
      hard reload: ctrl+shit+R

   *  Personalizar paginas de Errores de Peticion HTTP.
       Documentacion: https://laravel.com/docs/6.x/errors#custom-http-error-pages
       - crear una views en: resources/views/errors/N°_DEL_ERROR.php.BLADE y automaticamente
         tomara esta pagina cuando lance el error nombrado.
         los errores HTTP mas comunes:
           404 - pagina no encontada.
           401 - desautorizado.
           503 - Service Unavailable
   PHP:
    *  Operador ternario
         $boolean?accionTrue:accionFalse



////////////////////////////////////// DEBUGGER ////////////////////////////////////////////////////////
    - Documentacion: https://laravel.com/docs/5.7/logging#writing-log-messages
                    use Illuminate\Support\Facades\Log;
                    Log::info($message);
                    ver en: storage/logs/    //Ultimo archivo

    -  analizar objetos: dd(), var_dump(), dump() , print_r()
    -  analizar variables: isset(), is_null().
    -  analizar cilos: $loop (->first;->last;->count;->depth;parent->first)

///////////////////////////// ROUTES ////////////////////////////////////////////////////////////////
    * Documentacion en: https://laravel.com/docs/5.8/routing

  Se definen las peticiones y se asocian a algo.
    * se recibe los datos de las peticiones get, post, put..
    * procesar, retornar una view o algun texto.
    * se puede asociar la peticion con un controlador resource y este responde.
    * a los URL-link que usemos se les da un nombre para que cada ves que aputemos a esa URL utilizar
      ese nombre con: route('nombre-clave').



  + -------Opciones para retornar vistas o datos directamente (Sin controllers)--------------+
  +   * Responder solo texto                                                                 +
  +       Route::get('ruta1',function{                                                       +
  +       return "responder solo este Texto";})->name('nombre-clave');                       +
  +                                                                                          +
  +   * Responder View                                                                       +
  +       Route::view('/about','about')->name('about')                                       +
  +                                                                                          +
  +   * Captar datos por la url y responder un View. ej. localhost/subpagina/valor	         +
  +      Route::get('/ruta/{variable?}', function ($variable = 'valor_predeterminado') {     +
  +         return view('nombre_view',['variable' -> $variable]);				                     +
  +      })->name('nombre-clave');							                                             +
  +											                                                                     +
  +   * Responder View pasandole una constante:					                                     +
  +      Route::view('/ruta','subpagina',['variable' => 'CONSTANTE'])->name('nombre-clave'); +
  +									                                                                  		   +
  +   * Responder View pasandole un array:						                                       +
  +       <?php										                                                           +
  +         $array = [									                                                     +
  +            ['title'=>'valor1'], 							                                           +
  +            ['title'=>'valor2'],						                                          	   +
  +         ];			                                                                         +
  +							                                                                             +
  +    Route::view('/ruta','subpagina',compact('array'))->name('nombre-clave');	             +
  +----------------------------------------------------------------------------------------- +


///////////////////////// VIEW CON BLADE ///////////////////////////////////////////////////
 * Documentacion de blade en: https://laravel.com/docs/5.8/blade#template-inheritance
 * Directorio: 'resources/views/vista.blade.php'

  # Directivas de blade:
   - datos no escapados: {{$variable}}    no ejecuta HTML o JS
   - datos escapados:  {!!$variable!!}  si ejecuta HTML o JS. Alerta de XSS attacks no implementar inputs
   - Comentarios:       {{-- Comentarios --}}
   - decodificar un json: '@json($array)'

   - Directivas de control:
        @if(), @elseif(), @else, @endif
        @isset(), @endisset, @empty(), @endempty
        @switch(), @case(), @break, @default,  @endswitch
        @for () @endfor
        @foreach ($users as $user) @endforeach  @forelse ($users as $user)  @empty  @endforelse
        @while (true)  @endwhile
        @continue or @break

  # Uso de lang:
    imprimir palabras segun la traducccion @lang(palabras traducida segun "locate" de laravel)
    los busca en la directiva: app/resource/lang/en.json

  # Section and Layouts:

    +------------ Definir un layout: padre plantilla-------+
    +	<html>                                               +
    + 	  <head>                                           +
    +    	<title>App Name - @yield('title')</title>        +
    + 	  </head>                                          +
    + 	  <body>                                           +
    +    	@section('sidebar')                              +
    +        		This is the master sidebar.                +
    +    	@show                                            +
    +                                                      +
    +    	<div class="container">                          +
    +        		@yield('content')                          +
    +    	</div>                                           +
    + 	  </body>                                          +
    +	</html>                                              +
    +------------------------------------------------------+

    +--------- Extender el layout: hijo -------------------+
    +  @extends('layouts.app')                             +
    + 	                                                   +
    +  @section('title', 'Page Title')                     +
    +        		                                           +
    +  @section('sidebar')                                 +
    + 	  @parent                                          +
    +     <p>This is appended to the master sidebar.</p>   +
    +  @endsection                                         +
    +                                                      +
    +  @section('content')                                 +
    +     <p>This is my body content.</p>                  +
    +  @endsection                                         +
    +------------------------------------------------------+


//////////////////// CONTROLADORES ///////////////////////////////////////////////////////////////
   * Documentacion: https://laravel.com/docs/5.7/controllers
   * Directorio: "app/http/Controlers/"

   * crear un controlador:
       >php artisan make:controller nombreController -h,-i,-r,-api

   * generar Informacion:
       >php artisan make:controller nombreController -h

   * ver los controladores usados por cada Route:
      >php artisan route:list

   +--------------------- Controller con invoke -----------------------------------------------------+
   +    * contiene un unico metodo _invoke y se ejecuta automaticamente al ser invocado              +
   +    * crear controlador _invoke:                                                                 +
   +          >php artisan make:controller nombreController -i                                       +
   +                                                                                                 +
   +    * Syntaxis:                                                                                  +
   +         __invoke(Request $req){							                                            	     +
   +		//logica									                                                                   +
   +              $array = [									                                                       +
   +       		['title'=>'valor1'],					                                               		       +
   +       		['title'=>'valor2'],						                                               	       +
   +  	         ];									 	                                                               +
   +		return View('ViewName',compact('Array'))			                                               +
   +        }  		                                                                                   +
   +									                                                                               +
   +     * Route:								                                                                     +
   +	       Route::get('/subpagina','nombreControlador')->name('nombre-clave');                     +
   +-------------------------------------------------------------------------------------------------+

    +--------------------- Controller con Resourse ------------------------------------------------ +
    +  * Sirve Para manejar recursos en la BD (Ej.proyectos)  puede contener los 7 metodos REST     +
    +                                                                                               +
    +     - Los 7 metodos REST:                                                                     +
    +      1. INDEX          (GET)   /recurso       - listar recursos				                        +
    +	     2. CREATE         (GET)   /recurso/create- formulario para crear nuevo recurso           +
    +	     3. STRORE         (POST)  /recurso       - Guardar el recurso en la BD (creado por CREATE)+
    +      4. SHOW           (GET)   /recurso/{id}  - mostrar un recurso por ID                     +
    +	     5. EDIT           (GET)   /recurso/{id}/edit- formulario para editar un recurso existente por ID +
    +	     6. UPDATE         (PUT)   /recurso/{id}   - guardar los cambios hechos por EDIT          +
    +	     7. DELETE/DESTROY (DELETE)/recurso/{id}   - eliminamos un recurso por el ID              +
    +                                                                                               +
    +   * Crear:                                                                                    +
    +      >php artisan make::controller nameController -resourse (r)                               +
    +                                                                                               +
    +   * Route:                                                                                    +
    +     - Para invocar varios metodos REST.	                                                      +
    +	     - Solo invocar las Nombradas (Ej. create,edit) 				                                  +
    +            Route::resource('nombreDelRecurso','nombreController')->only([create,edit])        +
    +        - Invocar todas Exepto las nombradas (Ej. index,show)                                  +
    +	         Route::resource('nombreDelRecurso','nombreController')->except([index,show])         +
    +        - Invocarlas Todas:                                                                    +
    +          Route::resource('nombreDelRecurso','nombreController');                              +
    +                                                                                               +
    +     - Tambien se puede invocar un metodo a la ves. respetando los Metodos REST                +
    +          Route::get('/subpagina','nameController@index')->name('clave-name');                 +
    +          Route::post('view', 'MessageController@store')->name('nombre-post');                 +
    +          Route::put();    Falta probar                                                        +
    +          Route::patch();  Falta probar                                                        +
    +          Route::delete(); Falta probar                                                        +
    +                                                                                               +
    +-----------------------------------------------------------------------------------------------+

    +--------------------- Controller con APIs -----------------------------------------------------+
    +  * Para manejar las API (interfaces) del sistema. los metodos de comunicacion con el sistema. +
    +    Puede contener los metodos REST Exepto CREATE y EDIT.                                      +
    +                                                                                               +
    +  * crear:                                                                                     +
    +     >php artisan make::controller nameController -api                                         +
    +                                                                                               +
    +  * Route:                                                                                     +
    +   - Solo invocar las Nombradas (Ej. create,edit)                                              +
    +      Route::apiResource('nombreDelRecurso','nombreController')->only([create,edit])           +
    +   - Invocar todas Exepto las nombradas (Ej. index,show)                                       +
    +	   Route::apiResource('nombreDelRecurso','nombreController')->->except([index,show])          +
    +                                                                                               +
    +   - Tambien se puede invocar un metodo a la ves. respetando los Metodos REST?                 +
    +-----------------------------------------------------------------------------------------------+


/////////////////////////////MIGRACIONES/////////////////////////////////////////////////////////////////
 Documentacion: https://laravel.com/docs/5.8/migrations#introduction
   -  Crear, Manipular la BD con control de Versiones. En DOWN() se revierte lo del UP().

1. Crear base de datos y especificarla en .env

2. Generar archivo de migracion:

   2.1 Genera archivo de migracion para crear tabla "users"
       // nomenclatura: Nombre de Tablas en plural.
   -- >php artisan make:migration create_users_table --create=users

        Schema::create('nombre_tabla_plural', function (Blueprint $table) { ... });

   2.2 Genera archivo de migracion para modificar la tabla "users" sin Eliminar DATOS.
   -- >php artisan make:migration add_votes_to_users_table --table=users
                                  alter_in_users_table.
                                  add_phone_to_users_table.

        Schema::table('nombre_tabla_plural', function (Blueprint $table) { ... });

3.  comandos:

 3.1 Comandos: En (Schema::create - DEFINE) y (Schema::table - AGREGA):

      $table->integer('numero')->default($value);       // Crea integer, define valor por defecto.
      $table->integer('numero')->unsigned();            // crea integer,  no negativos.
      $table->string('email',100)->unique();            // crea String con max 100 y asignar indexes unique.
      $table->decimal('variable', 5, 2);                // crea decimal, range:  999.99 to -999.99.
      $table->double('variable', 5, 2)->autoIncrement();// crea double auto-imcrementable.
      $table->float('variable', 5, 2)->nullable();      // crea double, null-enable.
      $table->text('description')->charset('utf8')      // crea text, con utf8
      $table->boolean('confirmed')->first();            // crea boolean y colocarlo de primero en la tabla
      $table->char('name', 100)->comment('my comment'); // crea un char, con comentario.
      $table->timestamp('tiempo')->useCurrent();        // timestamp, con current por defecto.

      $table->timestamps();           // crea nullable, create_at y update_at
      $table->bigIncrements('id');    // auto incremental, primary-key, unsigned, bigint
      $table->Increments('id');       // auto incremental, primary-key, unsigned, int
      $table->rememberToken();        // recordar datos de entrada del usuario.

      $table->engine = 'InnoDB';
      $table->charset = 'utf8';

      $table->foreign('user_id')->references('id')->on('users');       //asigna clave foranea
      $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
      $table->foreign('user_id')->references('id')->on('users')->onUpdate('cascade');

 3.2 Comandos: En (Schema::table - ACTUALIZAR - MODIFICAR Columnas):

      $table->string('email',40)->change();             //cambiar max legth
      $table->string('name', 50)->nullable()->change(); //Cambiar max legth y nulleable.
      $table->renameColumn('from', 'to');               //Cambiar nombre de la columna
      $table->renameIndex('from', 'to');                //Cambiar nombre del Index
      $table->string('phone')->after('email');          //mover la columna para despues

      $table->primary('id');                           //cambiar a primary key.
      $table->unique('email');                         //cabiar a unique index.
      $table->index('state');                          //cambiar a indice simple

      Schema::rename($from, $to);                      //renombrar tabla

 3.3 Comandos para ELIMINAR:

     Schema::dropIfExists('flights');                      //eliminar tabla
     $table->dropColumn('votes');                          //eliminar una columna
     $table->dropColumn(['votes', 'avatar', 'location']);  //eliminar varias columnas

     $table->dropTimestamps();                             //eliminar creat_at y update_at
     $table->dropRememberToken();                          //eliminar remember_token

     $table->dropPrimary('users_id_primary');              //eliminar primary_key
     $table->dropUnique('users_email_unique');             //eliminar unique
     $table->dropIndex('geo_state_index');                 //eliminar index

     $table->dropForeign('NOMBRETABLA_ID_foreign');        //eliminar clave foranea

4.  Manejo/ejecucion de las migraciones:
          >php artisan migrate                  -> Ejecuta los metodos UP de todas las migraciones.
          >php artisan migrate:rollback         -> Ejecuta los metodos DOWN de las ultimas migraciones ejecutadas. (retrocede un paso)
          >php artisan migrate:rollback --step=2 -> retroceder 2 pasos
          >php artisan migrate:reset            -> Ejecuta los metodos DOWN de todas las migraciones.
          >php artisan migrate:fresh --seed     -> Ejecuta RESET and MIGRATE.   (aplica cambios hechos en los UP() pero se destruyen todos los datos!)


/////////////////////////////SEEDERS Y FACTORY//////////////////////////////////////////////////////////////////////////////////

DOCUMENTACION: https://laravel.com/docs/master/seeding
 crear:  php artisan make:seeder TableSeeder   (no se relaciona con una tabla aqui)
 registrar en: database/seeds/DatabaseSeeder.php.  Agregar: this->call(NombreSeeder::class);

* LLENAR MANUALMENTE:
                      use Illuminate\Support\Facades\DB;

                      DB::table('users')->insert([
                         'name' => Str::random(10),
                         'email' => Str::random(10).'@gmail.com',
                         'password' => bcrypt('secret'),
                      ]);

*  FACTORY: LLENAR AUTOMATICAMENTE.
   DOCUMENTACION: https://laravel.com/docs/6.x/database-testing#writing-factories
   LISTADO DE FAKERS: https://github.com/fzaninotto/Faker

      Crear: > php artisan make:factory recursoFactory --model recursoModel
      Agregar al Seeder:   factory(App\recursoModel::class, 10)->create();

    Run DatabaseSeeder:
    Run seeder:              php artisan db:seed
    migrate and run seeders: php artisan migrate:refresh --seed


////////////////////////// FORMULARIOS - VALIDACIONES CON BLADE /////////////////////////////////////////
Documentacion: https://laravel.com/docs/5.8/validation#available-validation-rules

  *Formularios-Validaciones:
    En la Vistas:
      - Utilizar @csrf  (si no, lanza error 401, es por seguridad)
      - los atributo "name" de los inputs Siempre se deberan DEFINIR!
      - hacer un formulario: <form method="POST" action="{{route('nombre-post')}}">
      - mostrar el error en html en caso de break: {!!$errors->first('name','<small>:message</small><br>')!!}
         manejo de $errors, Documentacion: https://laravel.com/docs/5.8/validation#quick-displaying-the-validation-errors
      - mantener valores en caso de Break: value="{{old('subject')}}
      - Editar Mensajes, Directorio: app/resources/lang/ Español En: "Github lang"".

      - crear ruta:
        - con route:    Route::post('viewName', 'Controllername@store')->name('nombre-post'); Debe tener mismo nombre y ser el mismo metodo. (una a la ves)
        - con resource: Route::resource('/projects','ProjectController')->only(['index','show','create','store']);     (varias a la ves)

  En Controlador:
        - >php artisa make:controller...
        - leer datos: $name = Request('name');

     OPCiON 1: Validaciones Sencillas en controlador.
        - pasar objeto: MetodoRest(Request $request){}
        - $fields = request()->validate([...]); // Validar todos los atributos, atributo no validado no sera guardado en la BD
                                                // porque $fields es la variable que se usara en el query.

              - funcionamiento del validate: // valida, en caso de fallo retorna $errors, si no, continua.
        -  En modelo users Definir: protected $guarded = [];
        -  guardar BD: Project:: create($fields);

    OPCION 2:  FormRequest: Validaciones de formularios mas completas sessiones, privilegios.
      Documentacion: https://laravel.com/docs/5.1/validation#form-request-validation

        -  crear: php artisan make:request saveProjectRequest    // se puede usar para el store y update
        -  Directorio:  'app/Http/Request/saveProjectController'

        - Metodos callback:
            authorize(): //se llama al hacer la peticion, aqui se debe verificar el usuario.
            //si retora false, devulde un 403 "Prohibido"
            //si retorna true, continua-llama al metodo rules().  ejemplo: return $this->user()->isadmin();
            Rules(): se deben definir las reglas de validacion.
              Importante: regla para ignorar unique cuando Actualiza "$this->user" DEbe ser El mismo que el definido en el meto que llama al  $request->validated() en el controlador Este caso update

                    'email' => [
                        'required',
                         Rule::unique('users','email')->ignore($this->user),  // tiene que ser el mismo que el definido en update.
                      ],

            messeges(): modificar mensajes

        - en controlador:
           -importarlo: use app/Http/Request/saveProjectController;
           -pasar objeto: MetodoRest(saveProjectRequest $request){}
           -Guardar en la BD: Project:: create( $request->validated());

        - Para Guardar en la BD, MODELO:
           - Ver: ORM - Eloquent, CRUB - Store.


////////////////////////////////////ELOQUEN - CRUB/////////////////////////////////////////////////////////////
Documentacion: https://laravel.com/docs/5.8/eloquent
ORM (objeto mapeo relacional) Datos de BD <->  clase/objeto

   1. Por cada tabla Crear una clase-modelo:
         >php artisan make:model NombreModelo (usar singular y camello de la tabla)
         direccion: app/NombreModelo.php

   2. Definir el modelo-Eloquen (dentro del modelo):
         protected $table = 'my_flights';    // define la tabla de la DB que representa.
         protected $primaryKey = 'flight_id';// define el primary_key
         public $incrementing = false;       // indicar que el primary_key no es auto_incrementable
         protected $keyType = 'string';      // indicar que el primary_key es un String
         public $timestamps = false;         // indicar que no se usa created_at y updated_at

   3. Importar clase-modelo dentro del controlador: use App/NombreModelo;

   4. Implementar CRUB con REST en el controlador:

       Index()  - Listar recursos:
              $tabla = NombreModelo::all();  // me trae todas las filas y columnas de la tabla.
              $tabla = NombreModelo::get();
              Opcion Paginar: $tabla = tabla::where('votes', '>', 100)->paginate(15);  // 15 - numero de item por pagina.
                   en el View:
                           <ul>
                               <li>tabla items...</li>
                               {{ $projects->links() }}
                           </ul>

       Show()  -  Seleccion por id, Especifico:
            1. html-href: {{route("ruta",objRow)}}
            2.  controler 2 formas:
               2.1. Route::resource('/projects','ProjectController')->only(['index','show']); //id pasa automaticamente.
               2.2. Route::get("/linkControler/{objRowid}",'nameController@show')->name('name.show')
            3. $project = Project::findOrfail($id);
            4. return view con $project

       Create() -retorna view Formulario creacion de recurso:
           1. return view('recurso.create');

       Store() - guardar datos:  (Ver Primero: formulario y validaciones)

            OPCION 1:    En modelo users Definir:
                   protected $guarded = []; // evita error 401, los datos quedan desprotegidos de la asignacion masiva por usuario.
                                            // nunca usar request()->all(); se tendran que validar todos los datos para poedr guardarlos.
                 2. Guardar con create.
                        $fields = request()->validate([...]);
                        Project:: create($fields);

            OPCION 2:   usando FromRequest.
                 - crear: php artisan make:request saveProjectRequest    // se puede usar para el store y update
                 -importarlo: use app/Http/Request/saveProjectController;
                 -pasar objeto: MetodoRest(saveProjectRequest $request){}
                 -Guardar en la BD: Project:: create( $request->validated() );

      Edit() - retorna view Formulario editar recurso: (Ver Primero: formulario y validaciones)
           1.   1. html-href: {{route("ruta",objRow)}}
           2.   $project = Project::findOrfail($id);
                return view con $project

     Update() - PUT, edita recurso en la BD.
          1.  form method= "POST"  //en html no existe PUT ni PATCH
          2.  route('recursos.update', $recurso)
          3.  value="{{ old('title',$recurso->valor) }}" // porDefecto = resurso->valor, en caso de errors mestra title. para no borrar lo tipiado
          4.  @method('PUT') // aqui se indica PUT o PATCH
          5.  recibir recurso y formrequest: update (Project $project,formRequest $request);
          6.  actualizar en la BD:
              $project->update(  $request->validated() );

      Delete() - DELETE- Eliminar recurso.
          1.  form method= "POST"  //en html no existe PUT, PATCH,DELETE
          2.  route('recursos.destroy', $recurso)
          3.  @csrf @method('DELETE');
          4. $project->delete();


/////////////////////////////SESIONES///////////////////////////////////////////////////////////////////////////////////
  Documentacion: https://laravel.com/docs/5.7/session

  // almacenamiento temporal de usuario actual

    configurar app/config/sesion.php
      drive: tipo de archivo donde se almacenaran estos datos:
         file - funciona bien, un archivo por cada navegador abierto
         directorio del file: app/storage/framework/sessions


////////////////////////MENSAJES FLASH o SESION////////////////////////////////////////////////////////////////////
Documentacion: https://laravel.com/docs/6.x/responses#redirecting-with-flashed-session-data

// Es una forma sencilla de mostrar mensajes de notificacion (flash, que desaparecen) despues de alguna peticion del usuario.
// el mensaje se guarda en la sesion, cuando redireccionamos a una view podemos mostrar el mensaje.
// Ventajas de uso: al refrescar no pide repetir accion y borra el mensaje, no es obligatiorio usar pagina nueva.
                    se procesa el mensaje con blade.
// Notificaciones para los REST: store,update y destroy.

    1. redireccionar a la view donde queremos mostrar el mensaje.
          return back()->with('keyStatus','Mensaje');
          return redirect()->with('keyStatus','Mensaje');
    2. con with('key','mensaje') //guarda el mensaje en session en el key.
    3. con las directivas de blade procesamos el mensaje.
              @if (session('MensajeStatus')) //hay mensaje?
                 {{session('MensajeStatus')}} // mostrar mensajes
    4. se puede mostrar el mnesaje en el layout.

///////////////////////////AUTENTICACION:-LOGIN-Y-REGISTRO-DE-USUARIO//////////////////////////////////////////////////////
Documentacion: https://laravel.com/docs/5.7/authentication
comando make:auth en laravel6 https://www.youtube.com/watch?v=cjIMSNQ27Mg
profundizar en autenticacion de usuarios: https://aprendible.com/series/autenticacion

 - Configuracion de la AUTENTICACION :   https://laraveldaily.com/9-things-you-can-customize-in-laravel-registration/

* implementar COMANDO: >php artisan make:auth  // automatiza el login,registro y Reestablecimiento de contraseñas.

1.  Estructura:
  - agrega el comando en auth:routes(); en routes/web.php, este contiene las routas mencionadas.
  - agrega los controladores en controllers/Auth/

  - Login, cierre de sesion:
     controller:
        LoginController
     routes:
       GET  /login    // para mostrar el formulario de LOGIN
       POST /login    // donde se envia el formulario del login
       POST /logout   // para cerrar sesiones
     view:
       /views/auth/login.blade.php
       /views/layouts/app.blade.php

  - formulario de registro:
     controller:
        RegisterController
     Routes:
        GET   /register // para mostrar el formulario de REGISTRO
        POST  /register // donde se envia el formulario de REGISTRO
     View:
        /views/auth/register.blade.php
        /views/layouts/app.blade.php

2. Redireccionamiento:
     - Acceso solo con login (/home)
     - Acceso publico, root, raiz (/)

     - Se elimina la ruta /home y el controlador HomeController Agregados por el make:Auth.
     - por defecto, luego de registrar se loguea al usuario automaticamente y redirecciona a (/home). se CAMBIA a (/) en RegisterController.php.
     - tambien cambiar a (/) luego del login en LoginController.
           (Esto es porque en este caso no abra (/home) y raiz (/) sera la misma home.
     - tambie por defecto, si ya se esta autentificado el login y el registro redirecciona a /home cambiar a /. CAMBIAR en Controller/Middleware/RedirectIfAuthenticated .

     - para manejar sesiones en UI en blade se manejan los comandos:
        {{auth()->user-name }} // acceder a datos de usuario autentificado (@auth evitar error.)
        @auth                  // ejecutar comandos si, se esta autentificado.
        @guess                 // ejecutar comandos si, NO se esta autentificado.
        @else                  // el contrario

     - Cerrar session:  <form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
     - deshabilitar registro o login  ej. auth::routes(['register' => false]);

///////////////////////////MIDDLEWARE - CASO: FILTRAR AUTENTENTICACION//////////////////////////////////////////////////////////////////////////////////
Documentacion: https://laravel.com/docs/5.7/middleware
Documentacion: https://laravel.com/docs/5.7/authentication#protecting-routes

Se usan los Middleware: identifica el tipo de peticion http (Ej. autenticacion) y se establece su comportamiento (Ej. redireccionamiento)

en espedifico se usan:  //los nombres de todos los middleware  estan en http/kernel.php
  http/Middleware/authenticate.php         name 'auth'    // comportamiento de peticiones para usuarios NO autentificados
  http/Middleware/RedirectIfAuthenticated  name 'guess'   // comportamiento de peticiones para usuarios SI autentificados

Se le pueden aplicar middleware (filtros) a las routes para permitir solo usuarios autentificados.
 OPCION 1:
   ->middleware('auth');  // asigna a todos los routes.

 OPCION 2: se se desea asignar por metodo REST.
   en el controlador en el __construct(), agregar:
        $this->middleware('auth');  //todos igual opcion 1
        $this->middleware('auth')->only('create',...);
        $this->middleware('auth')->exept('create'...);


///////////////////////////MIDDLEWARE - CASO: Filtrar rutas/////////////////////////////////////////////////////////////
Documentacion: https://laravel.com/docs/5.7/middleware
Filtrar otros Recursos:  cuerpo del mensaje encryptado, no se puede. implode( ", ", $request->all())
                         solo se puede obtener el id del resurso por la url().

- agregar campo edad en el registro en RegisterController y en la view.
- Crear Middleware >php make:middleware NombreMiddleware.
- Agregar Alias y ruta en: Kernel.php Variable $routeMiddleware
- en el middleware: Para leer valores del usuario: $request->user()->edad, usar condiciones y return.
- @if ({{auth()->user()}}) Se puede filtrar los usuarios en la view.

//////////////////////AUTORIZACIONES - PERMISOS Y ROLES DE USUARIOS BASICO///////////////////////////////////////////////////////////////////////
Documentacion: https://laravel.com/docs/5.7/authorization; video: https://www.youtube.com/watch?v=E11JQYiF-7g
Nota Defini en la tabla usario un rol con: 1. Empleado, 2. supervisor, 3. administrador.
(puedo traer cualquier valor de usuario pero no de recursos, se complica solo por GET?)

- En: App\Providers\AuthServiceProvider Se escribe la Restrincion:

   Gate::define('NombreDeRestrincion', function ($user, $id) {
           return $user->id == $id;           // ¿el id del recurso es igual al id del usuario? si es False call denies en caso contraerio call allow
           return intval($user->role) == 1;   // ¿usuario actual Es empleado?
  });

- en controlador se define el GATE.  solo puedo pasar variables del GET?  ni si quiera puedo obtener datos de la BD y luego pasarlo
if (Gate::allows('NombreDeRestrincion', $id)) { ...} // o denies redirect()->with();

Para blade usar directivas:  @cannot ('NombreDeRestrincion',$id)  @else  o  @can ('NombreDeRestrincion',$id)
 Ejemplo: Solo admin puede ver proyecto 3.
                --     Gate::define('solo-admin-show-project-3',function ($user,$projectId){
                            if ( $user->role != "3" && $projectId == "3") {return false;} else {return true;}
                       });

                --    @can(restrin..) @else @guest @if(id==3) @endif @else @endguest @encan



///////////////////////////  ROLES Y PERMISOS COMPLETO CON CHiNOBi /////////////////////////////////////////////
 - DOCUMENTACION guia: https://www.youtube.com/watch?v=gHvecXNv3S4&list=PLhCiuvlix-rSgQNLIl7Qg2KbQni3fz-ea&index=2 || Bienvenido al curso de Roles y Permisos en LARAVEL | Rimorsoft Online
 - paquete github: https://github.com/caffeinated/shinobi
 - Documentacion Shinobi: https://caffeinatedpackages.com/guide/packages/shinobi.html#usage

- actualizar laravel.
- instalar paquete shinobi:   composer require caffeinated/shinobi
- en .env cambiar cache_driver: "array" y refrescar configuracion "config: clear".
- Info, ver migraciones de CHINOBi, en directorio:  vendor/caffeinated/shinobi/migrations.
- Ejecutar migraciones: php artisan migrate
- instalar sistema de autenticacion php artisan make:auth [VER novedades de laravel6 aprendible.com - Extracción del frontend]
- Crear modelo, factory, migracion, controller -r. [no incluye seeder] >php artisan make:model Proyecto -a
        Nota: modelo de user esta creado por defecto, modelo de rol y permisos esta creado por shinobi.
        Nota: Crear controller -r: userController y roleController
        nota:
- crear seeders recursoSeeder y userSeeder.    >php artisan make:seeder nombreSeeder.
- llenar Factory del recurso y usuarios.
- En UserSeed Crear un rol Admin Por DEFECTO:
                use Caffeinated\Shinobi\Models\Role;

                Role::create([
                  'name' => 'Admin',
                  'slug' => 'admin',
                  'special' => 'all-access', // atributo admite: all-access, no-access o NULL.
                ]);

                $user = User::find(1)->assignRoles('admin'); // asignar el rol admin al primer usuario

- Crear seeder De Permisos: "permissinsTableSeeder"
- Definir los permisos (index[ruta:index], show[ruta:show], create[Rutas:create,store], edit[Rutas:edit,upadte], destroy[ruta:destroy]) de los roles, usuarios "sin create" y recursos.
          use Caffeinated\Shinobi\Models\Permission;

          Permission::create([
              'name' => 'Navegar Usuarios',  //nombres
              'slug' => 'users.index',      // nombre de permiso por convencion es nombre de la ruta. (puede ser otro)
              'descripcion' => 'Lista y navega todos los usuarios del Sistema',
            ]);

- registrar los middleware "role y permission" de CHiNOBi, en kernel.ph->routemiddleware.
               'role' => \Caffeinated\Shinobi\Middleware\UserHasRole::Class,
               'permision' => \Caffeinated\Shinobi\Middleware\UserHasPermission::Class,

- En el constructor del Controlador de los Recursos -r. (roles, usuarios y recurso) Relacionar los permisos.
      //Primero filtro invitados.
           $this->middleware('auth')->except('index','show');
      //Luego, se filtran los permisos.
           $this->middleware('can:projects.create')->only('create','store');
           $this->middleware('can:projects.edit')->only('edit','update');
           $this->middleware('can:projects.desroy')->only('desroy');

- Restringir Visualmente EN EL VIEW Blade con el uso de las directivas:
  @can(recurso.create), @else, cannot(slug),  Para ocultar.

- Asignar el rol al usuario y los permisos a los roles de forma manual
      - agregar en el modelo user:
                  use Caffeinated\Shinobi\Concerns\HasRolesAndPermissions;
                  dentro de clase: user HasRolesAndPermissions
      - en heidiSQL:
           role_user relacionar role_id y user_id.
            NOTA: si roles-special tiene all-access, tiene total acceso. (no Reviza la tabla permiso-role)
                                   tiene no-access, no tiene acceso alguno (no Reviza la tabla permiso-role)
                                   tiene NULL, tiene acceso especifico (Reviza la tabla permisson_role)
            NOTA: Definir permisson_role:
                                   relacionar: permmision_id y role_id (los que sean necesarios)

- Para Usuario se Podra editar el Rol - EDITAR USUARIO SOLO ROLES.
     - Agregar: en controlador de user: use Caffeinated\Shinobi\Models\Role;
     - $roles = Role::get();  y pasarla al view para listar en un checkbox
     - En la view: checkbox para que usuario puede eligir multiples roles. ver Boots4 checkbox custom BASICO:
                             <label  for="{{ $role -> id}}"> {{ $role -> name}}  </label>
                             <input type="checkbox" name="list-roles[]" value="{{ $role -> name}}" id="{{ $role -> id}}">

     - En user controlador update(): sincronizar roles asignador al usuario Ver link de Documentacion de shinobi.
        -   $user->syncRoles($request->get('list-roles'));    "$user" es el usuario al que queremos asignarle los roles
     - EN rol controlador store o update:
        -   $rol->syncPermissions($request->get('list-permisos'));   "$rol" es el rol el cual queremos asignarle los permisos

    - Usuarios recien registrados tendran por defecto el rol "invitado"
          En: ../Illuminate/fundation/auth/access/registerUsers.PHP

           protected function registered(Request $request, $user){ $user->assignRoles('invitado'); }


///////////////////////////EXTRAS///////////////////////////////////////////////////////////////////////
- Video 19 - Cómo enviar emails: 100 emials GRATIS al dia con sendgrid en laravel.
- video 30 - Reutilizar HTML parecidos - Caso: reutilizar Formularios CREATE y EDIT
- Ejecutar TEST: https://aprendible.com/series/laravel-tips/lecciones/video-como-escribir-tests-en-laravel-52
- Manejar Datos de las Peticiones: urls, users, cookies.
   Documentacion: https://laravel.com/docs/5.7/requests
- Manejo de peticiones, reglas buqueda en la BD: Documentacion: https://laravel.com/docs/5.8/queries
- Reseteo de contraseñas por Email: https://aprendible.com/series/autenticacion/lecciones/personalizando-el-email-de-reseteo-de-contrasena
- Documentacion Nivel principiante: https://ajgallego.gitbooks.io/laravel-5/content/index.html

- Servidores Conclusiones:
    no hay servidor gratuito para subir laravel o un broker MQTT. solo por tarjeta de credito y por 1año. (google,aws,azure,heroku, DigitalOcean...)
    opciones un cpu o rasperry. (android NO!). si es con maquina propia. hay que configurar la red y la pc.

 - UPDATE  LARAVEL
   - DOCUMENTACION 5.7 a 5.8: https://styde.net/como-actualizar-de-laravel-5-7-a-5-8/
   - DOCUMENTACION: 5.8 a 6 https://styde.net/como-actualizar-tu-aplicacion-de-laravel-5-8-a-6-0/ Video: https://www.youtube.com/watch?v=zk5xX1x5KCM

   /////////////////////////// RECOMENDACIONES /////////////////////////////////////////////

         -  ARREGLAR: - Mostrar los roles->special En usuario - indexx y lista de permisos en role - show.           CURSO DE ELOQUEN
                       - correo (olvide contraseña, recordar datos de sesion?, contacto y usuarios, verificar email), link EXTRAS
                       - contactame:  si usuario registrado no solicitarle datos
         -  CURSO:    proyecto a parte: Eloquent ORM | Rimorsoft Online  https://www.youtube.com/watch?v=IaVmfb-f6TE&list=PLhCiuvlix-rT96yLQTTr3-eTZl6sbhVte&index=26
         -  CURSO :    creo que proyecto a parte: CRUB dinamico con VUEJS de rimorsoft.


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////
  *                                 ***********************                                            *
  *                                 *  F R O N T - E N D  *                                            *
  *                                 ***********************                                            *
  *                                                                                                    *
  //////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////PREPARAR ENTORNO CON LARAVEL MIX/////////////////////////////////////////////////////////////////////////////////////
  LARAVEL MIX Documentacion: https://laravel.com/docs/5.7/mix
  LARAVEL MIX: API para compilar webpack en laravel. usando pre-procesadores CSS y JS

  Estos son Archivos public/css y /js son los que deben apuntar las Views. Ej:
  No se deben modificar.
      - <link rel="stylesheet" href="/css/app.css">   Se encuentra todas las plantillls CSS compiladas en una linea
      - <script src="/js/app.js" defer> </script>     Se encuentran todos los script compilados en una linea.

  Los archivos fuentes estan en resource /js y /saas
      - el codigo css o acss Se debe agregar en sass/app.scss
      - scripts js debe agregarse en js/app.js
      - Luego de una modificacion hay que compilar.

 Compilacion de CSS y JS con LARAVEL-MIX
  Requisitos:
       solo info: instruciones de compilacion en: webpack.mix.js
       instalar nodejs y yarn: "> npm install --global yarn"
       instalar dependencias de laravel para el front-end.  definidas en package.json - devDependencies "> yarn" y "">yarn update"

  Compilar manualmente:
       >yarn dev
       >yarn prod (mas tiempo)    si se compila para ir a producion
  Compilacion Fluida - Navegador Auto-refresh:
        Configuracion: en webpack.mix.js Agregar "mix.browserSync("http://app.test");"
       "> yarn watch", ctrl+c terminar el proceso.

  Para evitar hard-reload a los usuarios externos en produccion cuando se actualizan los archivos CSS y JS.
  cambiandole el nombre a esos archivos automaticamente.
      Configuracion:  en webpack.mix.js Agregar.
            if(mix.isProduction()){mix.version();}   solo funciona con >yarn prod
      las referencias AHORA deben hacerse asi:
              - <link rel="stylesheet" href="{{mix('/css/app.css')}}">
              - <script src="{{mix('/js/app.js')}}" defer> </script>

//////////////////////////////////BOOTSTRAP 4 y CSS/////////////////////////////////////////////////////////////////////////////////////////////////
 - ilustraciones para paginas web color-modificable: https://undraw.co/
 - Ver: https://css-tricks.com/  - Todo sobre CSS, tips: fLexbox, iframe, js y mas.
 - Documentacion Oficial Bootstrap4: https://getbootstrap.com/docs/4.4/layout/overview/
 - Ejemplos en w3schools: https://www.w3schools.com/bootstrap4/default.asp

UTILLIDADES:
   -- Todo Sobre el sistema Grid: https://getbootstrap.com/docs/4.0/layout/grid/
     - Boxs resposivos
     - alinear/Alignment boxs vertical y horizontal.
     - margenes o offset: offsetting-columns
     - boxs anidados
  -- media objets: https://getbootstrap.com/docs/4.0/layout/media-object/
     - Maneja de manera sencilla el grupo: mini-imagen, titulo y texto. tipo comentario de usuario.
  -- utilidades para maquetar:
      - propiedades de visualizacion: https://getbootstrap.com/docs/4.0/utilities/display/
           - ocultar boxs dependiendo de la panalla vertical.
           - inline: box comparte linea con otro.
           - block: box ocupa toda la linea.
      - propiedades d-Flex:   https://getbootstrap.com/docs/4.0/utilities/flex/
           - alinea, ordenar y tamaño los boxes! de manera avanzada
     - propiedades de text:  https://getbootstrap.com/docs/4.0/utilities/text/#text-alignment
           alinear, ordenar, color, forma de texto de los boxs
     - spacing/ margenes y relleno : https://getbootstrap.com/docs/4.4/utilities/spacing/
          relleno, y margenes. ver en "w3schools Bootstrap 4 Utilities/spacing".


 COMPONENTES:
    * Navbar - Documentacion: https://getbootstrap.com/docs/4.4/components/navbar/
    * Formularios -  Documentacion:  https://getbootstrap.com/docs/4.3/components/forms/

Pasos:
  En layout:
        - cambiar el extends del layout de las views/auth.
        - agregar  el viewport, el CSRF para axiox, id=app del body para VUEJS
        - el body se divide en:
            <header>
            <main>
            <footer class="bg-while text-center text-black-50 py-3 shadow"> investigar CSS
  Agregar: Navbar  Formulario:

* CSS:
 definir en: resource/sass/_variables.scss
      - color primario: $primary
      - $enable-responsive-font-sizes: true; enable responsive en h1, h2... <h1 class="display-5" >
      - color fondo $body-bg
      - $enable-gradients:true; botones 3D
 Definir en: resource/sass/app.scss
      - .h-screen { height: 100vh;} body/app ocupe hasta abajo la ventana, si el tamaño del contenido vertical lo define


  body/app  "d-flex flex-column justify-content-between"
                  d-flex: declara que usara la utilidad flex.
                  flex-column: los elementos se ordenar por columna una debajo del otro.
                  justify-content-between: separar los boxs equitativamente.
  footer: "bg-while text-center text-black-50 py-3 shadow"
                  py-3:
                  shadow: borde con sombra.
  contenido-body y Formuario:
      - conteiner: margenes Verticales pequeños. en sm desaparecen.
         - row: todo col debe ir en un row/fila.
            - "col-12 col-sm-10 col-lg-8 mx-auto"  Evita que el contenido se vuelva gigante horizontalmente y lo centra.
                 col-12:  <sm  abarga los 12
                 col-sm-10: >sm  abarca 10
                 col-lg-8: >lg abarca 8
                 mx-auto: siempre centra el contenido horizontalmente.

               - form: bg-white shadow rounded py-3 px-4
                   bg-white: background color blanco
                   rounded: redondear bordes
                   py-3: {property}{sides}-{size} ver : spacing
                        (p-padding/relleno)(y-top-buttom)--(3- 1rem)
                   px-4:
                       (p-padding/relleno)(x-left-right)--(4- 1.5rem)
                <hr> : linea de separacion horizontal.
  Tablas -index:
           - align-items-center: centra verticalmente.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
